/*
 * Copyright (c) 2014 Shortcut Media AG - All Rights Reserved.
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */
buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.0'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

version '1.1.0'
group 'com.shortcutmedia.shortcut.sdk'

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 27
        versionCode 3
        versionName project.version
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    useLibrary 'org.apache.http.legacy'
    resourcePrefix "shortcut_sdk_"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation files('libs/commons-codec-1.4.jar')
    implementation files('libs/commons-io-1.2.jar')
    implementation files('libs/zxing-2.1.jar')
    implementation 'com.android.support:appcompat-v7:27.1.0'
    implementation "android.arch.lifecycle:runtime:1.1.0"
    annotationProcessor "android.arch.lifecycle:compiler:1.1.1"
}

install {
    repositories.mavenInstaller {
        pom.project {
            name 'ShortcutSDK'
            description "This SDK provides components that allow you to interact with the " +
                    "Shortcut Image Recognition Service in your Android app."
            url 'https://github.com/shortcutmedia/shortcut-sdk-android'

            packaging 'aar'
            groupId project.group
            artifactId 'shortcut-sdk-android'
            version project.version

            licenses {
                license {
                    name 'MIT'
                    url 'https://tldrlegal.com/license/mit-license'
                }
            }
            scm {
                connection 'https://github.com/shortcutmedia/shortcut-sdk-android.git'
                developerConnection 'https://github.com/shortcutmedia/shortcut-sdk-android.git'
                url 'https://github.com/shortcutmedia/shortcut-sdk-android'

            }
            developers {
                developer {
                    id = 'shortcutmedia'
                    name 'ShortcutMedia'
                }
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    configurations = ['archives']
    override = true
    pkg {
        repo = 'shortcut-sdk'
        name = 'ShortcutSDK'
        description = "This SDK provides components that allow you to interact with the Shortcut Image Recognition Service in your Android app."
        publish = true
        publicDownloadNumbers = true
        licenses = ['MIT']
        vcsUrl = 'https://github.com/shortcutmedia/shortcut-sdk-android.git'
        dryRun = false
        version {
            name = project.version
            desc = "ShortcutSDK Android ${project.version}"
            released = new Date()
            vcsTag = 'v' + project.version
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += project.files("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
    project.android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            classpath += files(variant.javaCompile.classpath)
        }
    }
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/internal/**'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

